/**
 * @fileOverview
 * This ruleset enforces a role-based access control model with a focus on authorization independence.
 *
 * Data Structure:
 * - /halls/{hallId}: Stores hall information.
 * - /exams/{examId}: Stores exam information.
 * - /hall_allocations/{hallAllocationId}: Stores hall allocation data and includes denormalized member information for authorization.
 * - /students/{studentId}: Stores student information.
 *
 * Key Security Decisions:
 * - Halls and exams are assumed to be managed by admins (no owner checks).
 * - Hall allocations use a denormalized `members` map to control access.
 * - Student data has no specified ownership, defaulting to no write access.
 *
 * Denormalization for Authorization:
 * - The `hall_allocations` collection includes a `members` map, enabling role-based access control without requiring `get()` calls to other collections.
 *   Example: `{ members: { 'user_abc': 'admin' } }` grants admin rights to user_abc.
 *
 * Structural Segregation:
 * - Public and private data are stored in separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to hall documents.  Currently allows public read access and restricts writes.
     * @path /halls/{hallId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows read by anyone, but restricts writes.
     */
    match /halls/{hallId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to exam documents. Currently allows public read access and restricts writes.
     * @path /exams/{examId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows read by anyone, but restricts writes.
     */
    match /exams/{examId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to hall allocation documents using a membership map.
     * @path /hall_allocations/{hallAllocationId}
     * @allow get: if isSignedIn() && resource.data.members[request.auth.uid] != null;
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && getHallAllocationAdmin();
     * @allow delete: if isSignedIn() && getHallAllocationAdmin();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Grants access based on membership in the 'members' map and restricts updates/deletes to admins.
     */
    match /hall_allocations/{hallAllocationId} {
      allow get: if isSignedIn() && resource.data.members[request.auth.uid] != null;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && getHallAllocationAdmin();
      allow delete: if isSignedIn() && getHallAllocationAdmin();
    }

    /**
     * @description Controls access to student documents. Read only and does not allow creating, updating, or deleting.
     * @path /students/{studentId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows read by anyone, but restricts writes.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getHallAllocationAdmin() {
      return resource.data.members[request.auth.uid] == 'admin';
    }
  }
}