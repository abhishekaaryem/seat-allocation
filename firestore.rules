/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model for Halls and Students.
 * Authenticated users have write access to the halls and students collections.
 *
 * Data Structure:
 * - /halls/{hallId}: Stores hall information.
 * - /students/{studentId}: Stores student information.
 *
 * Key Security Decisions:
 * - Authenticated users can create, update, and delete halls and students.
 * - Data shape is not strictly enforced in this prototyping phase.
 *
 * Denormalization for Authorization:
 * Not applicable in this simple role-based access control.
 *
 * Structural Segregation:
 * Not applicable. All data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants authenticated users full access to hall documents.
     * @path /halls/{hallId}
     * @allow (create) User with valid auth can create a new hall.
     * @allow (get) Any authenticated user can read a hall.
     * @allow (update) Any authenticated user can update a hall.
     * @allow (delete) Any authenticated user can delete a hall.
     * @deny (create) Unauthenticated user cannot create a hall.
     * @deny (create) Creating a hall with invalid data will be blocked by schema validation. (Not implemented)
     * @principle Allows authenticated users to manage hall data.
     */
    match /halls/{hallId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants authenticated users full access to student documents.
     * @path /students/{studentId}
     * @allow (create) User with valid auth can create a new student.
     * @allow (get) Any authenticated user can read a student.
     * @allow (update) Any authenticated user can update a student.
     * @allow (delete) Any authenticated user can delete a student.
     * @deny (create) Unauthenticated user cannot create a student.
     * @deny (create) Creating a student with invalid data will be blocked by schema validation. (Not implemented)
     * @principle Allows authenticated users to manage student data.
     */
    match /students/{studentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // Helper function to determine if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}